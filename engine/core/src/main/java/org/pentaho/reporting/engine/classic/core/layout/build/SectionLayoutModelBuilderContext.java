/*! ******************************************************************************
 *
 * Pentaho Community Edition
 *
 * Copyright (C) 2024 by Hitachi Vantara, LLC : http://www.pentaho.com
 *
 * Use of this software is governed by the Business Source License included
 * in the LICENSE.TXT file.
 *
 * Change Date: 2028-08-13
 ******************************************************************************/

package org.pentaho.reporting.engine.classic.core.layout.build;

import org.pentaho.reporting.engine.classic.core.layout.model.RenderBox;
import org.pentaho.reporting.engine.classic.core.states.ReportStateKey;

public class SectionLayoutModelBuilderContext implements LayoutModelBuilderContext, Cloneable {
  private GroupSection section;
  private LayoutModelBuilderContext parent;
  private boolean strictLegacyMode;
  private boolean empty;
  private boolean keepWrapperBoxAlive;
  private boolean autoGeneratedWrapperBox;

  public SectionLayoutModelBuilderContext( final LayoutModelBuilderContext parent, final GroupSection section,
      final boolean strictLegacyMode ) {
    this.section = section;

    this.parent = parent;
    this.strictLegacyMode = strictLegacyMode;
    this.parent.addChild( section.getGroupBox() );
    this.parent.setEmpty( false );
  }

  public RenderBox getRenderBox() {
    return section.getAddBox();
  }

  public LayoutModelBuilderContext getParent() {
    return parent;
  }

  public boolean mergeSection( final ReportStateKey stateKey ) {
    if ( stateKey == null && strictLegacyMode == false ) {
      return false;
    }
    return section.mergeSection( stateKey );
  }

  public boolean isEmpty() {
    return empty;
  }

  public void setEmpty( final boolean empty ) {
    this.empty = empty;
  }

  public boolean isKeepWrapperBoxAlive() {
    return keepWrapperBoxAlive;
  }

  public void setKeepWrapperBoxAlive( final boolean keepWrapperBoxAlive ) {
    this.keepWrapperBoxAlive = keepWrapperBoxAlive;
  }

  public boolean isAutoGeneratedWrapperBox() {
    return autoGeneratedWrapperBox;
  }

  public void setAutoGeneratedWrapperBox( final boolean autoGeneratedWrapperBox ) {
    this.autoGeneratedWrapperBox = autoGeneratedWrapperBox;
  }

  public LayoutModelBuilderContext close() {
    this.section.close();
    return this.parent;
  }

  public void commitAsEmpty() {

  }

  public void addChild( final RenderBox child ) {
    section.addedSection( child );
  }

  public void removeChild( final RenderBox child ) {
    section.removedLastSection( child );
  }

  public Object clone() {
    try {
      return super.clone();
    } catch ( CloneNotSupportedException e ) {
      throw new IllegalStateException( e );
    }
  }

  public LayoutModelBuilderContext deriveForPagebreak() {
    final SectionLayoutModelBuilderContext clone = (SectionLayoutModelBuilderContext) clone();
    clone.section = section.deriveForPagebreak();
    if ( clone.parent != null ) {
      clone.parent = parent.deriveForPagebreak();
    }
    return clone;
  }

  public LayoutModelBuilderContext deriveForStorage( final RenderBox clonedRoot ) {
    final SectionLayoutModelBuilderContext clone = (SectionLayoutModelBuilderContext) clone();
    if ( clone.parent != null ) {
      clone.parent = parent.deriveForStorage( clonedRoot );
      clone.section = section.deriveForStorage( clone.parent.getRenderBox() );
    } else {
      clone.section = section.deriveForStorage( null );
    }
    return clone;
  }

  public void validateAfterCommit() {
    section.performPostCommitModelCheck();
  }

  public void performParanoidModelCheck() {
    section.performParanoidModelCheck();
  }

  public void restoreStateAfterRollback() {
    section.restoreStateAfterRollback();
  }

  public int getDepth() {
    if ( parent == null ) {
      return 1;
    }
    return 1 + parent.getDepth();
  }
}
